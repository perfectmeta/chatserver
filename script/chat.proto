syntax = "proto3";

option java_multiple_files = true;
option java_package = "chatserver.gen";

option csharp_namespace = "Chat.Gen";


//////////////////////////////////////聊天模型
// 现在id都用的int64，未来可能会改为string

///////// asr
message AudioStream {
  int64 roomId = 1;  // 传一下roomId吧，可能生成audioUrl会用到。
  bytes audio = 4; // 麦克风收录产生
  string audioFormat = 5; // 音频传输格式, 支持列表见ReadMe
}

message TextStream {
  oneof response{
    string text = 1; // asr生成
    string audioUrl = 2;  // 当audio stream结束被存下来的时候发
    int32 delete = 4; // asr生成, 删除前面多少个字符
  }
}

///////// chat
message ChatRequest {// 临时显示在聊天窗口里的message
  int64 roomId = 1;
  MsgType msgType = 5;
  string text = 6;
  string audioUrl = 7;
  string imageUrl = 8;
  string videoUrl = 9;
  string seq = 10;
}

message ChatResponseStream {
  oneof response {
    // 返回一个带messageId的消息，替代原来的临时message，这个对应关系客户端自己来维护
    // message 至少有3个状态，正在asr生成，正在发送，服务器确认
    // 本协议里两个Message结构会包含seq字段，供客户端用以确定对应发送的时哪条
    Message requestMessage = 1;
    string text = 2; // chatgpt生成
    bytes audio = 3; // tts生成
    Message responseMessage = 4;  // 最后chatgpt回应的消息，汇总到这，有messageId
    CandidateRecommend candidates = 5;  // 发完正文后，可选可能会有这个字段，提示玩家后续可能发什么，也可能没有
  }
}

message CandidateRecommend {
  int64 messageId = 1;
  repeated string recommend = 2;
}

///////// async message notification
message Message {
  int64 roomId = 1;
  Author author = 3;
  int64 createdTime = 4;
  MsgType msgType = 5;
  string text = 6;
  string audioUrl = 7;
  string imageUrl = 8;
  string videoUrl = 9;
  string seq = 10;
  int64 messageId = 11;
}

message Author {
  int32 type = 1; // 0: 真人，1：bot， 之后改为UserType
  int64 userId = 2;
  string name = 3;
}

enum UserType {
  HUMAN = 0;
  BOT = 1;
}

enum MsgType {
  AUDIO_WITH_TEXT = 0;    // 真人语音聊天
  TEXT_WITH_AUDIO = 1;    // chatgpt回复的
  TEXT = 2;               // 真人打字聊天

  IMAGE = 3;
  VIDEO = 4;
}

message RoomInfo {
  int64 roomId = 1;
  string roomName = 2;

  Author you = 3;  // 先写死，只支持2个人
  Author ai = 4;
  int64 createdTime = 5;

  int64 firstMessageId = 6;
  int64 lastMessageId = 7;
}

message Hello {
  string whoami = 1;
}

message EnterRoomRequest {
  int64 roomId = 1;
  int64 lastMessageId = 2;
}

message RegisterInfo {
  string email = 1;
  string nickname = 2;
  string phone = 3;
}

message RegisterFeedback {
  enum StatusCode {
    OK = 0;
    NICKNAME_INVALID = 1;
    NICKNAME_CONFLICT = 2;
    PHONE_INVALID = 3;
    PHONE_CONFLICT = 4;
    EMAIL_INVALID = 5;
    EMAIL_CONFLICT = 6;
    OTHER_ERROR = 7;
  }

  int32 statusCode = 1;
  string message = 2;
  int32 userId = 3;
}

message RoomId {
  int32 roomId = 1;
}

message GetMemoryRequest {
  int64 userId = 1;
  int64 otherUserId = 2;
}

message Memory {
  int64 memoryId = 1;
  string memo = 2;
  int64 createdTime = 3;
  int64 userId = 4;
  int64 otherUserId = 5;
}

message DeleteMemoryRequest {
  int64 userId = 1;
  int64 otherUserId = 2;
  int64 memoryId = 3;
}

message DeleteMemoryResponse {
  int32 errorCode = 1;
}


message Contact {
  int32 userType = 1; // 0: human , 1: bot
  string nickName = 2;
  string categoryName = 3;
  int32 gender = 4; // 0: unknown, 1: male, 2: female
  string tags = 5;
  string description = 6;
  string headIconUrl = 7;

  string englishName = 8;
  string location = 9;
  string personalizedSignature = 10;
  string birthDay = 11;
  string interest = 12;
  string character = 13;
  string favoriteFoods = 14;
  string unInterest = 15;
  string lifeGoal = 16;

  string artistModel = 17;
}

message CreateMineNPCsRequest {
  int64 category = 1;
}

message CreateMineNPCsResponse {
  int64 userId = 1;
}

message EstablishContactWithRequest {
  int64 userId = 1;
}

message EstablishContactWithResponse {
  int64 contactId = 1;
}

message DeleteContactRequest {
  int64 userId = 1;
}

message DeleteContactResponse {
  int64 errCode = 1;
}

message MessageList {
  repeated Message messageList = 1;
}

message MemoryList {
  repeated Memory memoryList = 1;
}

message UpdateSelfInfoResponse {
  int32 result = 1;
  Contact contact = 2;
}

//////////////////////////////////////

service ChatService {
  // 第一步用户登录，取到token后，
  // 把token放到之后所有的请求的header里，例子见app/src/test/java/chatserver/ServerAppTest.java
  rpc Signup(RegisterInfo) returns (RegisterFeedback);

  // 取自己信息
  rpc GetSelfInfo(Hello) returns (Contact);
  // 更新个人页的信息
  rpc UpdateSelfInfo(Contact) returns (UpdateSelfInfoResponse);

  // 登录游戏后立马就发送Hello，取room list，contact list, new message stream，这3个可能就是在连接期间一直会发。
  rpc GetRoomStream(Hello) returns (stream RoomInfo);
  rpc GetContactStream(Hello) returns (stream Contact);
  rpc GetNewMessageStream(Hello) returns (stream Message); //自己发和gpt回应的在Chat()里自己确认，不通过这个接口发回自己


  // 进入房间，发lastMessageId后，服务器同步给客户端这之后的消息
  // TODO: 好像不该有这个协议，本来就应该一登录就推送lastMessageId之后的消息
  rpc EnterRoom(EnterRoomRequest) returns (MessageList);

  // 流式语音识别，这个是不管接下来的chat的
  rpc SpeechRecognize(stream AudioStream) returns (stream TextStream);

  // 聊天，会接受chatgpt发回的文本流，这样响应性更好。当一句话或多句话结束时会服务器会给出语音。
  rpc Chat(ChatRequest) returns (stream ChatResponseStream);


  // 取记忆，会complete
  rpc GetMemory(GetMemoryRequest) returns (MemoryList);

  rpc DeleteMemory(DeleteMemoryRequest) returns (DeleteMemoryResponse);
}